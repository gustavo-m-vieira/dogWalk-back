datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

model Users {
  id           String       @id
  cpf          String
  name         String
  role         UserRoleEnum
  email        String       @unique
  telephone    String
  passwordHash String
  createdAt    DateTime
  deletedAt    DateTime?
  Address      Addresses[]
  Dog          Dogs[]
  Trip         Trips[]
}

model Addresses {
  id         String    @id
  street     String
  number     Int
  complement String?
  city       String
  district   String
  state      String
  country    String
  zipCode    String
  UserId     String
  user       Users     @relation(fields: [UserId], references: [id])
  createdAt  DateTime
  deletedAt  DateTime?
}

model Dogs {
  id          String             @id
  name        String
  breed       String
  size        DogSizeEnum
  birthDate   DateTime
  temperament DogTemperamentEnum
  createdAt   DateTime
  deletedAt   DateTime?
  TutorId     String
  tutor       Users              @relation(fields: [TutorId], references: [id])
  TripsDogs   TripsDogs[]
}

model Trips {
  id          String             @id
  startDate   DateTime
  duration    Int // in minutes
  DogWalkerId String
  dogWalker   Users              @relation(fields: [DogWalkerId], references: [id])
  slots       Int
  dogType     DogTemperamentEnum
  createdAt   DateTime
  deletedAt   DateTime?
  TripsDogs   TripsDogs[]
}

model TripsDogs {
  TripId    String
  DogId     String
  createdAt DateTime
  catched   DateTime?
  dropped   DateTime?
  trip      Trips     @relation(fields: [TripId], references: [id])
  dog       Dogs      @relation(fields: [DogId], references: [id])

  @@id([TripId, DogId])
}

enum UserRoleEnum {
  TUTOR
  DOGWALKER
  ADMIN
}

enum DogSizeEnum {
  TINY
  SMALL
  MEDIUM
  BIG
}

enum DogTemperamentEnum {
  COOL
  SHY
  ANGRY
}
